package ${packageName}.controller;

import java.util.List;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.lewis.common.annotation.Log;
import com.lewis.common.core.controller.BaseController;
import com.lewis.common.core.domain.AjaxResult;
import com.lewis.common.enums.BusinessType;
import ${packageName}.entity.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.lewis.common.utils.poi.ExcelUtil;
#if($table.crud || $table.sub)
import com.lewis.common.core.page.TableDataInfo;
#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@Slf4j
@Api(tags = "${functionName}")
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController {

	@Autowired
	private I${ClassName}Service ${className}Service;

	@ApiOperation(value = "查询${functionName}列表", notes = "")
	@PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
	@GetMapping("/list")
#if($table.crud || $table.sub)
	public TableDataInfo list(${ClassName} ${className}) {
		startPage();
		List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
		return getDataTable(list);
	}
#elseif($table.tree)
	public AjaxResult list(${ClassName} ${className}) {
		List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
		return AjaxResult.success(list);
	}
#end

	@ApiOperation(value = "导出${functionName}列表", notes = "")
	@PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
	@Log(title = "${functionName}", businessType = BusinessType.EXPORT)
	@GetMapping("/export")
	public AjaxResult export(${ClassName} ${className}) {
		List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
		ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}.class);
		return util.exportExcel(list, "${functionName}数据");
	}

	@ApiOperation(value = "获取${functionName}详细信息", notes = "")
	@PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
	@GetMapping(value = "/{${pkColumn.javaField}}")
	public AjaxResult getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
		return AjaxResult.success(${className}Service.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField}));
	}

	@ApiOperation(value = "新增${functionName}", notes = "")
	@PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
	@Log(title = "${functionName}", businessType = BusinessType.INSERT)
	@PostMapping
	public AjaxResult add(@RequestBody ${ClassName} ${className}) {
		return toAjax(${className}Service.insert${ClassName}(${className}));
	}

	@ApiOperation(value = "修改${functionName}", notes = "")
	@PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
	@Log(title = "${functionName}", businessType = BusinessType.UPDATE)
	@PutMapping
	public AjaxResult edit(@RequestBody ${ClassName} ${className}) {
		return toAjax(${className}Service.update${ClassName}(${className}));
	}

	@ApiOperation(value = "删除${functionName}", notes = "")
	@PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
	@Log(title = "${functionName}", businessType = BusinessType.DELETE)
	@DeleteMapping("/{${pkColumn.javaField}s}")
	public AjaxResult remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s) {
		return toAjax(${className}Service.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s));
	}
}